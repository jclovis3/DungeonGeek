Product/ion Log:

Begin Iteration 01 - version 0.1:
Day 1 (8/17/2017): Started project. Created sprites for hero and magical rings. Handled basic movement with arrow keys. Implemented view scrolling with hero.

Day 2 (8/18/2017): Added sprites for room and walls. Planned how room layout and tunneling will work for next day of coding.

Day 3 (8/19/2017): Implemented tunneling algorithm.

<break>

Day 4 (8/22/2017): Completed summaries and documentation on existing code. Changed to use of var wherever appropriate. Added comments to explain things that required furthur study to understand them. Refactored movement methods which were previously written to serve each direction individually. Added generation of hidden and locked doors, along with the ability to notice hidden doors by walking past them. Added down stairs and ability to go down them. Added run option to quickly navigate tunnels.

Day 5 (8/23/2017): Improved keyboard response and timing. Added the map view so you can look at the entire floor (or what you've discovered).

<break>

Day 6 (8/25/2017); Improved screen drawing and scaling. Implemented view ports to separate status text from drawing area. Added status text. Improved display scaling. Began visual documentation to prepare for code review on Tuesday with the Oak Harbor Geeks Meetup Group. Probably won't be coding the project anymore until after the review so they have time to examine what I have. Will start a new thread for the next leg. 

Day 7 (8/26/2017): Simplified sprite drawing calls to reduce code repetition and fix some errors in drawing. Added support for window resizing and maximizing, showed the mouse (will be used in the future anyway) and refactored some code. Actually spent a lot of time fixing some drawing bugs I noticed today. Tomorrow should be all about documentation for my code review exercise on Tuesday. This will be the last post under this discussion (unless you had questions). I can share a copy of the executables if anyone who's interested asks.
End Iteration 02:

<break>


Begin Iteration 02 - version 0.2:
Day 1 (8/29/2017): Held a code review with three other members of the Oak Harbor Geeks Meetup group. Discussed flow of control and major events. It was suggested that there be more separation between the move and run processes such that the move processes doesn't need to know if running is enabled.

Day 2 (8/30/2017): Separated run process from Move, added a dictionary list of movement keys and associated directions to aid in detecting which key was pressed (by looping) so as to illiminate many repeated if statements. Added the ability to manually pan the current display around so you can look around without moving but recenters view around hero once movement continues.

Day 3 (8/31/2017): Incorperated an Inventory view and selection system with ability to drop items. Upgraded GameText class to support background colors. Modified keyboard handling to break off control from main game when other menus are open. Coded message queue processing and acknoledgement. 

Day 4 (9/1/2017): Upgraded mapping engine. Set map size to grow with each new level. Modified map scaling for mapview zoom. Added two debug levels to the FloorGenerator class to help identify problems should any more be found.

Day 5 (9/2/2017): Added instruction screen. Gave mouse a 1.5 second delay before cursor disapears until moved again. Began developing EffectManager to support loot and other game effects such as fainting, and trap effects. Incorperated most effects into game loop.

Day 6 (9/3/2017): Created screen to show message history. Widened gap between lines of text for clarity (considering changing font). Added door bashing for locked doors. Improved handling of sprites for loot so they remain loaded in the static Inventory Class rather than get reloaded every time a new floor is created. Implemented an input window and added capability to rename an item from the inventory, but this input window still needs work.

Day 7 (9/4/2017): Spent some time with discovery of handling multiple windows and keyboard input in MonoGame. Cleaned up keyboard input when renaming objects to fix bugs with responsiveness and repeated characters. Modified inventory list to stay sorted.

Day 8 (9/5/2017): Added class to contain all game constants for sharing between classes. Updated all exiting code to refer to the new class. Modified input window for renaming objects so that an item cannot be given a name which would make it display too wide to fit in the inventory window. Added a method to the inventory to truncate text when its too long in the event a randomly generated name is too long. Modified how items are stored and accessed in the inventory due to a crash that may occur if two items of the same class were given the same name (required adding a UniqueID value to each item).

Day 9 (9/6/2017): Attempted to try a new tunneling algorithm to simplify the results but it resulted in having only a single path from any one room to any another and this is not acceptable. Saved it for later in case I decide to work on it some more, but reverted back to version at end of yesturday. Added ability to put a magical ring on and discover its effects. Added removal and prevention of removal if cursed. Hero can have up to one ring on each hand. Inventory now shows if an item is equipped and where it is equipped. Optimized Inventory game loop to reuse objects rather than creating new ones through each loop.

Day 10 (9/7/2017): Fixed some bugs with regard to MORE message delivery and rest/search command. Set temporary effect incrementers to work on all effects. Implemented calorie burning (needs fine tuning still) and starvation prompts as well as fainting effects and timing. Plan for combat to consume more calories than walking and fine tune how many calories are burned with each step (currently 1).

<break>

Day 11 (9/9/2017): Added Food class. Decided to build up some interfaces to support different varieties in Inventory Items, starting with the IWearable interface because Food should not be forced to implement properties and methods that wearable items would have. Might also need to create an interface for INamable or IStackable so you can't rename stackable objects like Food, Gold, or the like. Moved some fields and methods of InventoryItem over to being static. Debugged a problem with typing response that occurs while a message lingered from picking it up while trying to type a new name in the input window (this required first discovering the coorelation). Implemented food consumption, glutteny, and effects of becoming overburdened which may occur if gluteny causes negative strength modifier.


Day 12 (9/10/2017): Included the tab key to recenter the view on the hero without toggling the map view or using a move action. Fixed stacked inventory so dropping items will remove only one item from a stack and consuming items properly updates the inventory text with the updated quantity. Replaced code that performs clamping or Min/Max functions with their respective methods from the MathHelper class. Updated & added method documentation. Used the closed door tile as the game icon.


Begin Iteration 03 - version 0.3:
Summary of changes:
Added a game icon
Added scrolls (not all of them though)
Added monsters and combat (just rats for now)
Added hero XP and leveling up algorithms
Added base armor and dexterity modifiers for combat (using D&D handbook)
Added a game menu and hall of fame. The menu loads first, allowing start of a new game or review of instructions.
Added gold drops (used for score only)
Added armor and weapons (some anyway)


Day 1 (9/11/2017): Added the scroll class and implemented many effects.

Day 2 (9/12/2017): Created a static list of all scrolls to be generated once so that discovered effects and name changes can be recorded for when hero finds same scroll again later. Added an abstract method to InventoryItem to see if two items are similiar. This is used mainly for stacking items in the inventory, but also for pulling up the scroll from the archive set so the properties of a newly picked up scroll can be updated. Added a base class for monsters and started work on making them drawn when visible and triggering any changes in status when they see the hero. I need to finish up with some prerequisits to attacking, like moving towards the hero or any other objective point.

Day 3 (9/13/2017): Developed an algorithm for plotting the most direct route to the hero for all monsters to follow. Best described like a funnel pouring into the hero so monsters can follow the path of least resistance. Funnel map is calculated one time for each hero move so all monsters benifit from the same map and don't have to recalculate their own paths.

Day 4 (9/14/2017): Performed much needed work on restructuring and moving methods around. Created a Utility class to contain methods used by many classes none of which should be the sole owner of those methods (like calculating point distance). Moved many methods around to more appropriate classes and spent some time trying to improve the efficiency of the path mapping algorithm.

Day 5 (9/15/2017): Implemented a faster algorithm for counting steps from hero to monsters. Moved some more methods around and adjusted the handling of messages to the player when coming from other classes. Created an ICombatant interface to facilitate handling data for determining the outcome of a combat round using a new CombatManager class created today as well. Implemented the new interface on the hero (after making it an instance class again) and now I need to do the same for the Monster class and modify the Rat subclass to fit.

Day 6 (9/16/2017): Finished up combat mechanism for hero and monsters. Corrected some bugs with messages coming up in the wrong order during combat actions. Fixed several other bugs relating to line of sight and mutual awareness. Fixed More prompt to stop all actions until cleared again, and movement only clears the last message when monsters are not visible now. Added some more utility methods for current and future use. Reduced healing of hero to 1 point every 20 turns unless otherwise healed with a potion or other effect. Made a smaller sprite for the rat but saved the larger one in case I add Giant Rat as a new monster.

Day 7 (9/17/2017): Updated combat handling so that multiple damage types can be sent and processed (not just a primary and secondary anymore). Added a message so that when you fail to bash a door open, it tells you the door gets weaker so the player doesn't think they have to find a key or something.

<break>

Day 8 (9/20/2017): Researched XP Level increase, and how Max XP should be affected. Implemented XP level increase and adjusted healing method to allow for increased healing rate with higher levels. Implemented basic human stats (all 10's to start) to the hero because the constitution modifier is used in determining increases in max HP. Adjusted carry weight calculations based off D&D specifications as well. Fixed a bug where the calories didn't update immediately after eating food before the hero moved.

Day 9 (9/21/2017): Fixed a bug in the combat system where a monster could be killed after missing it (had 2 contributing causes). Fixed bug where hero would only take one point of damage regardless of amount hit. Implemented identify scroll functionality.

Day 10 (9/22/2017): Modified Esc key action to close from Map view as it seemed common to want to hit escape to exit the map. Changed how a turn evolves when the hero is slowed (automatic FinishTurn every even cycle as opposed to just skipping any move command every other cycle). Enabled run when slowed but monsters still move twice for every step. Added a debug feature to drop loot at hero's feet. Fixed bug with monster visibility when next to hero at diagonal while stepping into tunnels, doors and stairs. Fixed bug where monsters detected from the scroll but not within line of sight still blocks running. Fixed bug where reading the detect monster scroll did not reveal any monsters until after next movement. Short circuited death routine so that when message queue doesn't display MORE, and game is over, player can't continue making more moves before the game ends. Corrected bad logic in the inventory list display and scrolling algorithm. Added a confirmation prompt before exiting the game. Created the Main menu and implemented quit, and show instructions. Added gold to the game, using it as a basis for game score in the hall of fame later. Monsters given specialized (in case monsters should have a higher probability like lepracans and dragons) chance of dropping gold if they fail to have any loot. Changed hero fumble to have 50% chance of being knocked out and the other half of just being confused. Fixed a bug where a scroll of light doesn't change the floor tiles in a dark room to litroom tiles.

Day 11 (9/23/2017): Added "New Game" to the main menu, then set it up so the first floor map is not generated and the main menu opens from the start allowing the player to start a new game, or load an existing game. Once a game is started, the map will be generated (or loaded from file when Load/Save are implemented). This required several InitNewGame methods in the classes that needed to reset some data for each new game. New game also requires player to enter their name for the hall of records. Updated handling of game menu so quitting or starting a new game only prompts for confirmation when a game is already in session. Updated all windows to reuse same GameText object with each draw pass to prevent outOfMemory errors from being thrown by XNA. Created Hall of Records and incorperated it into the Game menu and end game actions. Still need to add loading and saving of the record data to file though. Implemented a security algorithm using MD5 hash to ensure records are not tampered with. Source string of the hash includes hard coded data to make it more difficult to defeat.

Day 12 (9/24/2017): Decided to drop the save option, and implement auto save into one time use files in between levels. Fixed bug where energy dropping below 1000 caused message to show every turn. Fixed bug where last messages added to queue weren't playing before closing game menu, and ensured death message played last. Fixed bug where death by multiple monsters in same turn created multiple entries in hall of records. Fixed a couple of spelling errors in strings. Added hall of records file loading and saving.

Day 13 (9/25/2017): Added three basic armor types (leather, chain and plate) and incorperated all related actions. Added two mele weapon types and related functions to weild and get damage stats. Fixed a bug with loot graphic scaling. Fixed bug with monsters not taking damage. Updated About screen to pull the version number from the Assembly info.

<break - review with Meetup group>

Begin Iteration 04 - version 0.4:
Summary of Changes:
Changed how lit and dark rooms are displayed, providing lighting glow from hero

Day 1 (9/27/2017): Removed dark room tile and implemented use of grey tint on tiles outside hero's line of sight to create a viewable line of sight effect that dims when no longer within line of sight or visible distance. Lit rooms still show 100% but dark rooms are only lit around the hero and dim with grey tint otherwise. Changed the floor tile to something a little less textured to make it easier to see the knife and some other objects on the floor. Removed the reload from autosave function from the start menu as I decided it defeats the purpose of a score board. Created a GameWindow class to manage all the common code for displaying a window and its contents. Modified almost all older windows to use it so as to reduce repeatitave code, but the inventory screen is going to require more work due to the nature of paralel dictionaries and lists.

<break>

Day 2 (9/30/2017): Added inventory screen to list of classes sharing the common GameWindow for drawing functions. Each still has it's own keyboard handling due to the various tasks involved in each screen.